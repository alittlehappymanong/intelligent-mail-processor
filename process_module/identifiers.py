from langchain_core.prompts import ChatPromptTemplate

from llm_config import LLMConnector
from langchain_core.tools import tool
from utils_module import log_factory

@tool
def is_kick_off_mail( mail_text: str):
    """ check if email is kick off email

    :param mail_text: the mail info
    :return: if the email is kick off email
    """
    logger = log_factory.get_logger()
    logger.info("start to check if mail is kick off email...")
    # Define a custom prompt to provide instructions and any additional context.
    # 1) You can add examples into the prompt template to improve extraction quality
    # 2) Introduce additional parameters to take context into account (e.g., include metadata
    #    about the document from which the text was extracted.)
    prompt_template = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                "You are an expert email processor. "

                "Tell if one email is the kick off email during mail thread according to the mail properties. "
                "If the email is the kick off email, then output 'kick off mail': 'true' "
                "If not the kick off email, then output 'kick off mail': 'false'"

                "please transform the output to json without json type tag"

                "Below is the mail properties definition: "
                "1. The header field In-Reply-To contains the message ID of the email that the current message is a response to."
                "2. The header field References contains links to previous related emails by including their unique message ID numbers."
                "3. The header field References indicates the mail thread process."
                "4. The header field Message-ID is generated by mail system to identify email"
                "5.1 A mail thread, also known as an email thread or email chain, is a series of related emails grouped together as part of the same conversation."
                "5.2 Mail thread starts with an original email and includes all subsequent replies and forwards, allowing users to follow the discussion easily."
                "5.3 Essentially, mail thread organizes the communication around a specific topic or subject line, making it easier to track responses."

                "Below is some business definition: "
                "1. If two email are related email, then they are in same mail thread."
                "2. First email is the first mail of one mail thread, we can tell it by empty In-Reply-To field."
                "3. In one mail thread, only have one kick off email."
                "4. If one email is the first email send in to 'zhongnora@outlook.com' of all the email in the mail thread, then it's the kick off email. "
                "5. Kick off email may not be the first email."
                ,
            ),
            # Please see the how-to about improving performance with
            # reference examples.
            # MessagesPlaceholder('examples'),
            ("human", "{text}"),
        ]
    )

    # get llm connection
    llm = LLMConnector.get_llm()
    # structured_llm = llm.with_structured_output(schema=MailMessageBM)

    # if (mailText == None): mailText = "MIME-Version: 1.0\nDate: Thu, 6 Feb 2025 16:50:56 +0800\nMessage-ID: <CAKHC1N6-KcTmtjzJ+k906qNX5nPcR7H8123ERBmSszQ_KAPLBQ@mail.gmail.com>\nSubject: Greeting email from Nora\nFrom: ZHONG waner <zhongwaner91@gmail.com>\nTo: 1403585646@qq.com\nContent-Type: multipart/alternative; boundary=\"0000000000002859e9062d755748\"\n\n\n--0000000000002859e9062d755748\nContent-Type: text/plain; charset=\"UTF-8\"\n\nHi there,\n\nThe weather is very nice today, hope everything is going well for you!\n\nYours,\nNora\n\n--0000000000002859e9062d755748\nContent-Type: text/html; charset=\"UTF-8\"\n\n<div dir=\"ltr\">Hi there,<div><br><div>The weather is very nice today, hope everything is going well for you!</div><div><br></div><div>Yours,</div><div>Nora</div></div></div>\n\n--0000000000002859e9062d755748--"
    prompt = prompt_template.invoke({"text": mail_text})
    # mail = structured_llm.invoke(prompt)
    mail = llm.invoke(prompt)
    result = mail.model_dump()
    logger.info("check result: "+ str(result))
    return result.get("content")