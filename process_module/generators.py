from langchain_core.prompts import ChatPromptTemplate

from llm_config import LLMConnector
from langchain_core.tools import tool
from utils_module import log_factory

@tool
def get_related_email_sql(mail_text: str):
    """generate sql for finding related emails according to mail attributes

    :param mail_text: the mail information
    :return: raw sql, not the related mail
    """
    logger = log_factory.get_logger()
    logger.info("start to generate sql to get related email....")
    # Define a custom prompt to provide instructions and any additional context.
    # 1) You can add examples into the prompt template to improve extraction quality
    # 2) Introduce additional parameters to take context into account (e.g., include metadata
    #    about the document from which the text was extracted.)
    prompt_template = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                "You are an expert email system manager. "

                "please transform the output to json without json type tag"

                "Below is the email basic knowledge: "
                "1. The email header field In-Reply-To contains the message ID of the email that the current message is a response to."
                "2. The email header field References contains links to previous related emails by including their unique message ID numbers."
                "3. The email header field Message-ID is generated by mail system to identify email"
                "4.1 A email thread, also known as an email thread or email chain, is a series of related emails grouped together as part of the same conversation."
                "4.2 It starts with an original email and includes all subsequent replies and forwards, allowing users to follow the discussion easily."
                "4.3 Essentially, it organizes the communication around a specific topic or subject line, making it easier to track responses."
                "4.4 If two email are related email, then they are in same mail thread."
                "5. First email is the first mail of one mail thread, we can tell it by empty In-Reply-To field."

                "Below is the business knowledge related with email: "
                "1. Kick off email is the first email send to system mailbox in one mail thread."
                "2. Kick off email may not be the first email."

                "Below is the system structure and function knowledge: "
                "1. All the email send to system mail box 'zhongnora@outlook.com' will be processed by email system."
                "2. The email header info including message-id, references, send address, received address, in-reply-to, message body, subject will be saved in the database. "
                "3. One email corresponds to one transaction action, and the transaction changed by the email will be recorded in the mail record in db."
                "4. Ticket action including: create transaction, update transaction, close transaction, reopen transaction."
                "5. First, need to determine the position number the email in the mail thread. "
                "5.1 If the email is the first email in the mail thread and sent to system mail box, then create transaction."
                "5.2 If not, then will find the same subject and latest related mail saved in db, "
                "5.3 if find then get the related transaction in the related mail's record, get the all the ticket not closed and do update."

                "Below are three solution, choose one to generate sql. (do not add in output)"
                "1. Fuzzy match kick off email with email subject."
                "2. Fuzzy Match kick off email with header field References . "
                "3. Fuzzy match kick off email with body content. "

                "If need to find related mail, then give a raw sql to query one mail's related mail in database according to the chose solution, output 'sql': sql, remove ';' in the end of the sql."
                "Correspondence rules between attributes and database column, please use these column name and mail real property to generate sql:"
                "Split the sql and only output the 'WHERE' part. "
                "The database table for email is named 'mail', column name are as below: (do not add below part in output content)"
                "'message id': MESSAGE_ID, "
                "'email subject': SUBJECT,"
                "'sender Address': MAIL_FROM,"
                "'received Address': MAIL_TO,"
                "'email body': MAIL_BODY,"
                "'references': REFERENCE_LIST."
                ,
            ),
            # Please see the how-to about improving performance with
            # reference examples.
            # MessagesPlaceholder('examples'),
            ("human", "{text}"),
        ]
    )

    # get llm connection
    llm = LLMConnector.get_llm()
    # structured_llm = llm.with_structured_output(schema=MailMessageBM)

    # if (mailText == None): mailText = "MIME-Version: 1.0\nDate: Thu, 6 Feb 2025 16:50:56 +0800\nMessage-ID: <CAKHC1N6-KcTmtjzJ+k906qNX5nPcR7H8123ERBmSszQ_KAPLBQ@mail.gmail.com>\nSubject: Greeting email from Nora\nFrom: ZHONG waner <zhongwaner91@gmail.com>\nTo: 1403585646@qq.com\nContent-Type: multipart/alternative; boundary=\"0000000000002859e9062d755748\"\n\n\n--0000000000002859e9062d755748\nContent-Type: text/plain; charset=\"UTF-8\"\n\nHi there,\n\nThe weather is very nice today, hope everything is going well for you!\n\nYours,\nNora\n\n--0000000000002859e9062d755748\nContent-Type: text/html; charset=\"UTF-8\"\n\n<div dir=\"ltr\">Hi there,<div><br><div>The weather is very nice today, hope everything is going well for you!</div><div><br></div><div>Yours,</div><div>Nora</div></div></div>\n\n--0000000000002859e9062d755748--"
    prompt = prompt_template.invoke({"text": mail_text})
    # mail = structured_llm.invoke(prompt)
    mail = llm.invoke(prompt)
    result = mail.model_dump()
    logger.info("generate result: "+str(result))
    return result.get("content")